AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  captura

  SAM Template for captura

Globals:
  Api:
    Auth:
      DefaultAuthorizer: AuthorizerFunction
      Authorizers:
        AuthorizerFunction:
          FunctionArn: !GetAtt AuthorizerFunction.Arn
          Identity:
            Headers:
              - Authorization
  Function:
    CodeUri: src/
    Runtime: nodejs22.x
    MemorySize: 128
    Architectures:
      - x86_64
    Timeout: 100
    Tracing: Active
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    Layers:
      - !Ref DependenciesLayer

Parameters:
  DevAuthCallbackUrl:
    Type: String
    Description: Auth callback in development
    Default: http://localhost:3000
  ProdAuthCallbackUrl:
    Type: String
    Description: Auth callback in production
    Default: http://localhost:3000
  PrimaryRegion:
    Type: String
    Default: "eu-central-1"
  DRRegion:
    Type: String
    Default: "eu-west-1"

Conditions:
  IsPrimaryRegion: !Equals [ !Ref AWS::Region, !Ref PrimaryRegion ]
  IsDRRegion: !Not [ !Condition IsPrimaryRegion ]

Resources:
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DependenciesLayer
      Description: A shared layer for npm dependencies
      ContentUri: layers/deps
      CompatibleRuntimes:
        - nodejs22.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs22.x
      BuildArchitecture: x86_64

  # User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      UserPoolTags:
        Key: Name
        Value: !Sub ${AWS::StackName} User Pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        !Sub ${AWS::StackName}-UserPoolClient
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 6
      IdTokenValidity: 6
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      CallbackURLs:
        - !Ref DevAuthCallbackUrl
        - !Ref ProdAuthCallbackUrl

  # User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool
      ManagedLoginVersion: "2"

  BrandedLogin:
    Type: AWS::Cognito::ManagedLoginBranding
    Properties:
      ClientId: !Ref UserPoolClient
      UserPoolId: !Ref UserPool
      UseCognitoProvidedValues: true

  ImageUploadMetaDataTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: ImageUploadMetaDataTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
        - AttributeName: objectKey
          AttributeType: S
        - AttributeName: date
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: username
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Replicas:
        - Region: !Ref PrimaryRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: !Ref DRRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
      GlobalSecondaryIndexes:
        - IndexName: UsernameIndex
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-staging-bucket'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PrimaryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-captura-bucket-primary'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration: !If
        - IsPrimaryRegion
        - Role: !GetAtt S3ReplicationRole.Arn
          Rules:
            - Destination:
                Bucket: !Sub 'arn:aws:s3:::${AWS::StackName}-captura-bucket-primary-replica'
              Status: Enabled
              Prefix: ""
        - !Ref 'AWS::NoValue'

  PrimaryBucketReplica:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-captura-bucket-primary-replica'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled

  S3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReplicationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - s3:GetObjectVersionForReplication
                  - s3:GetBucketVersioning
                  - s3:GetBucketLocation
                Resource:
                  - !If
                    - IsPrimaryRegion
                    - !Sub 'arn:aws:s3:::${AWS::StackName}-captura-bucket-primary'
                    - !Ref 'AWS::NoValue'
                  - !If
                    - IsPrimaryRegion
                    - !Sub 'arn:aws:s3:::${AWS::StackName}-captura-bucket-primary/*'
                    - !Ref 'AWS::NoValue'
                  - !If
                    - IsDRRegion
                    - !Sub 'arn:aws:s3:::${AWS::StackName}-captura-bucket-primary-replica'
                    - !Ref 'AWS::NoValue'
                  - !If
                    - IsDRRegion
                    - !Sub 'arn:aws:s3:::${AWS::StackName}-captura-bucket-primary-replica/*'
                    - !Ref 'AWS::NoValue'

  ImageProcessingStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ImageProcessingFunction.Arn
                  - !GetAtt CleanupFunction.Arn
                  - !GetAtt SendNotificationFunction.Arn
        - PolicyName: StagingBucketReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub '${StagingBucket.Arn}/*'
        - PolicyName: PrimaryBucketWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${PrimaryBucket.Arn}/*'

  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-ImageProcessingStateMachine
      DefinitionUri: src/statemachine/objectCreated.asl.json
      DefinitionSubstitutions:
        ImageProcessingFunctionArn: !GetAtt ImageProcessingFunction.Arn
        CleanupFunctionArn: !GetAtt CleanupFunction.Arn
        SendNotificationFunctionArn: !GetAtt SendNotificationFunction.Arn
        AddDynamoDbEntry: !GetAtt AddDynamoDbEntryFunction.Arn
      Role: !GetAtt ImageProcessingStateMachineRole.Arn
      Events:
        EBPutRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref StagingBucket

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: upload.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3WritePolicy:
            BucketName: !Ref StagingBucket
      Events:
        UploadImageEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties: &CommonBuildProps
        Minify: true
        Target: "es2020"
        Sourcemap: true
        Tsconfig: "__TSCONFIG_PATH__"
        External:
          - "/opt/nodejs/*"
        EntryPoints:
          - handlers/upload.ts

  ImageProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: processImageFunction.handler
      Environment:
        Variables:
          PRIMARY_BUCKET_NAME: !Ref PrimaryBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !GetAtt StagingBucket.Arn
                - !Sub "${StagingBucket.Arn}/*"
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !GetAtt PrimaryBucket.Arn
                - !Sub "${PrimaryBucket.Arn}/*"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *CommonBuildProps
        EntryPoints:
          - handlers/processImageFunction.ts

  CleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cleanupFunction.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource:
                - !GetAtt StagingBucket.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *CommonBuildProps
        EntryPoints:
          - handlers/cleanupFunction.ts

  SendNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendNotificationFunction.handler
      Policies:
        - AWSLambdaBasicExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *CommonBuildProps
        EntryPoints:
          - handlers/sendNotificationFunction.ts

  ShareImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: shareImageFunction.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImageUploadMetaDataTable
      Environment:
        Variables:
          PRIMARY_BUCKET_NAME: !Ref PrimaryBucket
      Events:
        ShareImageEvent:
          Type: Api
          Properties:
            Path: "/images/{id}/share"
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *CommonBuildProps
        EntryPoints:
          - handlers/shareImageFunction.ts

  AddDynamoDbEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: addDynamoEntry.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImageUploadMetaDataTable
      Environment:
        Variables:
          UPLOAD_METADATA_TABLE_NAME: !Ref ImageUploadMetaDataTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *CommonBuildProps
        EntryPoints:
          - handlers/addDynamoEntry.ts


  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
      Tags:
        Stack: !Sub "${AWS::StackName}"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *CommonBuildProps
        EntryPoints:
          - handlers/authorizer.ts

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambdaHandler
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
